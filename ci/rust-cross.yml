%YAML 1.1
# vim: expandtab:ts=8:sw=2:tw=80:fdm=marker:ft=yaml:
# yamllint disable rule:line-length
---

.rust:cross:matrix:
  parallel:
    matrix:
      - TARGET:
          - armv7-unknown-linux-gnueabihf
        STRIP: arm-linux-gnueabihf-strip
      - TARGET:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
        STRIP: x86_64-linux-gnu-strip


# clippy set to deny everything.
.rust:clippy:
  stage: check
  script:
    - cargo clippy -- -D clippy::cargo -D clippy::all

# Various lints that we usually want
.rust:check:
  stage: check
  script:
    - rustc --version && cargo --version
    # Don't run "cargo check" here as "cargo test" stage will do compile test of the code.
    - cargo fmt -- --check
    - cargo clippy --workspace
    - cargo clippy --workspace -- -W clippy::cargo
    - cargo doc --no-deps -p ${PACKAGENAME}

# Compile, then run, test-cases
.rust:test:
  stage: test
  script:
    - rustc --version && cargo --version
    - cargo build --tests -j1
    - dbus-run-session -- cargo test --workspace --verbose

# Run tests for coverage
.rust:coverage:
  stage: test
  image: registry.gitlab.com/modioab/base-image/debian/rust:latest
  script:
    - rustc --version && cargo --version
    - source <(cargo llvm-cov show-env --export-prefix)
    - cargo llvm-cov clean --workspace
    - cargo build --tests -j1
    - dbus-run-session -- cargo test --workspace --verbose
    - cargo llvm-cov --no-run
    # These consume the coverage data, first to cobertura XML
    - grcov .
      --binary-path ./target/debug/
      --source-dir .
      --branch
      --ignore-not-existing
      --ignore "*cargo*"
      --output-type cobertura
      --output-path ${CI_PROJECT_DIR}/coverage.xml
  coverage: '/^TOTAL.*\b(\d+\.\d+%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml


# similar to the above, but release mode. Most of the logic is inverted
.rust:cross:
  extends: .rust:cross:matrix
  image: registry.gitlab.com/modioab/base-image/debian/rust:latest
  stage: prepare
  rules:
    # do not run the job if PACKAGENAME is not set
    - if: '$PACKAGENAME == null'
      when: never
    - when: on_success
  variables:
    RELNAME: target/${TARGET}/release/${PACKAGENAME}
    FILENAME: ${CI_PROJECT_DIR}/target/${TARGET}/release/${PACKAGENAME}
  script:
    - cargo build --target-dir "${CI_PROJECT_DIR}/target" --release -p ${PACKAGENAME} --target ${TARGET}
    - 'set -x; ${STRIP} ${FILENAME}; set +x'
    - |
      cat > "${CI_PROJECT_DIR}/metrics.txt" << __EOF__
      # TYPE binary_size gauge
      # UNIT binary_size bytes
      binary_size{package="${PACKAGENAME}",target="${TARGET}"} $(stat --format=%s "${FILENAME}")
      # EOF
      __EOF__
  artifacts:
    name: "${CI_COMMIT_REF_SLUG}-${TARGET}"
    paths:
      - ${RELNAME}
    reports:
      metrics: metrics.txt
...
